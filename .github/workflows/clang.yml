name: Clang

on: [push, pull_request]

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  CRADLE_THINKNODE_API_TOKEN: ${{ secrets.CRADLE_THINKNODE_API_TOKEN }}
  CRADLE_THINKNODE_DOCKER_AUTH: ${{ secrets.CRADLE_THINKNODE_DOCKER_AUTH }}

jobs:

  clang:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        config: [Debug, Release]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: friendlyanon/setup-vcpkg@v1
      with:
        committish: 0c20b2a97c390e106150837042d921b0939e7ecb

    - name: Install
      run: |
        sudo apt install lcov ocaml-nox
        sudo pip3 install virtualenv
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 15

    - name: Configure
      run: |
        export CC=`which clang-15`
        export CXX=`which clang++-15`
        ${CXX} --version
        scripts/set-up-python.sh --python=python3
        cmake -Bbuild -DCMAKE_BUILD_TYPE=${{matrix.config}} \
          -D"CMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
          .

    - name: Build
      run: |
        cmake --build build --config ${{matrix.config}} -j4

    - name: Test
      if: ${{ matrix.config == 'Release' }}
      run: |
        python python/generate_config.py $CRADLE_THINKNODE_API_TOKEN
        cmake --build build --config Release --target all_unit_tests -j4
        source .venv/bin/activate
        pip3 install -e python
        cmake --build build --config Release --target integration_tests

    - name: Benchmarks
      if: ${{ matrix.config == 'Release' }}
      run: |
        cmake --build build --config Release --target benchmark_tests
      timeout-minutes: 20

    - name: Unit test with coverage
      if: ${{ matrix.config == 'Debug' }}
      run: |
        python python/generate_config.py $CRADLE_THINKNODE_API_TOKEN
        cmake --build build --config Debug --target unit_test_coverage -j4

    - name: Upload coverage report
      if: ${{ matrix.config == 'Debug' }}
      run: |
        bash <(curl -s https://codecov.io/bash) -X gcov
