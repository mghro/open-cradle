{# Emit the .hpp code for forward declaring an enum type. #}
{% macro forward_declaration_code(type_info) %}
    enum class {{type_info.name}};
{% endmacro %}

{# Emit the preprocessor cleanup code for an enum type. #}
{% macro preprocessor_cleanup_code(type_info) %}
    {% with enum_info = type_info.schema.enum %}

// Ensure that no enum constants have been #defined by external libraries.
    {% for item in ordered_object_items(enum_info) %}
#ifdef {{cpp_id_for_item(item) | upper}}
    #undef {{cpp_id_for_item(item) | upper}}
#endif
    {% endfor %}

    {% endwith %}
{% endmacro %}

{# Emit the .hpp file code for an enum type definition. #}
{% macro hpp_definition_code(type_info) %}
    {% with enum_info = type_info.schema.enum %}

enum class {{type_info.name}}
{
    {% for name, info in ordered_object_items(enum_info) %}
        {% if info.doc %}
    {{info.doc | format_comment(width=75) | indent(4)}}
        {% endif %}
    {{cpp_id_for_item((name, info)) | upper}}
        {%- if not loop.last %},{% endif %}

    {% endfor %}
};

template<>
struct type_info_query<{{type_info.name}}>
{
    static void
    get(api_type_info* info);
};

inline size_t
deep_sizeof({{type_info.name}} const& x)
{
    return sizeof(int);
}

inline size_t
hash_value({{type_info.name}} const& x)
{
    return size_t(x);
}

// Get the string representation of the given {{type_info.name}} value.
// Note that this returns the value as defined in the API, which may not be appropriate to show in
// a normal UI.
std::string
get_value_id({{type_info.name}} value);

void
to_dynamic(cradle::dynamic* v, {{type_info.name}} x);

void
from_dynamic({{type_info.name}}* x, cradle::dynamic const& v);
    {% endwith %}
{% endmacro %}

{# Emit the .cpp file code for an enum type definition. #}
{% macro cpp_definition_code(type_info) %}
    {% with enum_info = type_info.schema.enum %}

void
type_info_query<{{type_info.name}}>::get(api_type_info* info)
{
    api_named_type_reference ref;
    ref.app = "cradle";
    ref.name = "{{type_info.name}}";
    *info = make_api_type_info_with_named(ref);
}

std::string
get_value_id({{type_info.name}} x)
{
    switch (x)
    {
    {% for name, info in ordered_object_items(enum_info) %}
     case {{type_info.name}}::{{cpp_id_for_item((name, info)) | upper}}:
        return "{{name | lower}}";
    {% endfor %}
    }
    CRADLE_THROW(
        cradle::invalid_enum_value() <<
            cradle::enum_id_info("{{type_info.name}}") <<
            cradle::enum_value_info(int(x)));
}

void
to_dynamic(cradle::dynamic* v, {{type_info.name}} x)
{
    *v = get_value_id(x);
}

void
from_dynamic({{type_info.name}}* x, cradle::dynamic const& v)
{
    auto s = boost::to_lower_copy(cradle::cast<std::string>(v));
    {% for name, info in ordered_object_items(enum_info) %}
    if (s == "{{name | lower}}")
    {
        *x = {{type_info.name}}::{{cpp_id_for_item((name, info)) | upper}};
        return;
    }
    {% endfor %}
    CRADLE_THROW(
        cradle::invalid_enum_string() <<
            cradle::enum_id_info("{{type_info.name}}") <<
            cradle::enum_string_info(cradle::cast<std::string>(v)));
}
    {% endwith %}
{% endmacro %}
